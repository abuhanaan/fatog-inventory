// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Customer {
  id              Int      @id @default(autoincrement())
  firstName       String?
  lastName        String?
  phoneNumber     String?
  shippingAddress String?
  gender          String?
  customerId      Int     @unique
  user            User?    @relation(fields: [customerId], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  orders Order[]
}

model Staff {
  id              Int      @id @default(autoincrement())
  firstName       String?
  lastName        String?
  phoneNumber     String?
  gender          String?
  staffId         Int     @unique
  user            User?    @relation(fields: [staffId], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  orders Order[]
  sales  Sales[]
  stocks Stock[]
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  category  String
  role      String
  password  String
  active    Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  logs     Log[]
  customer Customer?
  staff    Staff?
}

model InventoryHistory {
  id              Int      @id @default(autoincrement())
  inventoryId     Int
  orderItemId     Int? @unique  // this comes from sales record, the effect only takes place when the corresponding sales record is approved
  stockItemRefId  String? @unique  // stockItem is also stockList and likewise orderItem is also orderList
  remainderBefore Int
  remainderAfter  Int
  effectQuantity  Int
  increment       Boolean
  decrement       Boolean
  note            String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  inventory       Inventory   @relation(fields: [inventoryId], references: [id])
  orderItem       OrderList?  @relation(fields: [orderItemId], references: [id])
  stockItem       StockList?  @relation(fields: [stockItemRefId], references: [refId])
}

model Inventory {
  id            Int      @id @default(autoincrement())
  productRefId  String   @unique
  remainingQty  Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  product       Product   @relation(fields: [productRefId], references: [refId])
  history       InventoryHistory[]
}

model Sales {
  id                 Int      @id @default(autoincrement())
  orderRefId         String   @unique
  amountPayable      Int
  amountPaid         Int
  paymentStatus      String
  outStandingPayment Int
  note               String?
  cashierId          Int         
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  order Order? @relation(fields: [orderRefId], references: [refId])
  staff Staff? @relation(fields: [cashierId], references: [id])
  payments PaymentHistory[]
}

model PaymentHistory {
  id                 Int      @id @default(autoincrement())
  orderId            Int
  salesId            Int
  outstandingBefore  Int
  prevPaymentSum     Int
  amountPaid         Int
  outstandingAfter   Int
  date               DateTime
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  order Order? @relation(fields: [orderId], references: [id])
  sales Sales? @relation(fields: [salesId], references: [id])
}


model OrderList {
  id             Int      @id @default(autoincrement())
  orderRefId     String
  productRefId   String
  noOfBags       Int
  pricePerBag    Int
  totalWeight    Int
  totalPrice     Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  order     Order?   @relation(fields: [orderRefId], references: [refId])
  product   Product? @relation(fields: [productRefId], references: [refId])
  inventory InventoryHistory?
}

model Order {
  id                 Int      @id @default(autoincrement())
  refId              String   @unique
  totalAmount        Int
  totalWeight        Int
  totalNoOfBags      Int
  customerId         Int?
  staffId            Int?     
  phoneNumber        String
  shippingAddress    String?
  paymentStatus      String?
  deliveryStatus     String?
  amountPaid         Int?
  outStandingPayment Int?
  note               String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  customer           Customer?    @relation(fields: [customerId], references: [customerId])
  staff              Staff?    @relation(fields: [staffId], references: [staffId])
  orderLists         OrderList[]
  invoice            Sales?
  payments PaymentHistory[]
}

model StockList {
  id             Int      @id @default(autoincrement())
  refId          String   @unique
  stockRefId     String
  productRefId   String
  noOfBags       Int
  pricePerBag    Int
  totalWeight    Int
  totalAmount    Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  stock       Stock?   @relation(fields: [stockRefId], references: [refId])
  product     Product? @relation(fields: [productRefId], references: [refId])
  inventory   InventoryHistory?
}

model Stock {
  id            Int      @id @default(autoincrement())
  refId         String   @unique
  totalAmount   Int
  totalWeight   Int
  totalNoOfBags Int
  staffId       Int
  invoice       String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  staff          Staff?    @relation(fields: [staffId], references: [staffId])
  stockLists     StockList[]
}

model Product {
  id             Int      @id @default(autoincrement())
  refId          String   @unique
  name           String   @unique
  type           String
  pricePerBag    Int
  weight         Int
  size           Int
  manufacturerId Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  manufacturer  Manufacturer? @relation(fields: [manufacturerId], references: [id])
  orderLists    OrderList[]
  stockLists    StockList[]
  inventory     Inventory?
}

model Manufacturer {
  id             Int      @id @default(autoincrement())
  brandName      String   @unique
  repName        String
  repPhoneNumber String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  products Product[]
}

model Log {
  id           Int    @id @default(autoincrement())
  requestBody  String
  responseBody String
  action       String
  userId       Int?   @unique
  user         User?  @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
